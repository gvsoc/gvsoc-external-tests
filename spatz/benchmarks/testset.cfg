from plptest.testsuite import *
import re

def check_output(test, output, cycle_ref, cycle_error_ref):
    log = ''

    match = re.search(r"The execution took (\d+) cycles\.", output)

    if not match:
        return (false, "Cycle count not found in log string\n")

    cycle_count = int(match.group(1))
    cycle_diff = abs(cycle_count - cycle_ref)
    cycle_error = cycle_diff / cycle_count * 100

    log += f'Found {cycle_count} cycles vs ref {cycle_ref}, error {cycle_error}% vs {cycle_error_ref}%\n'

    if cycle_error > cycle_error_ref:
        return(False, f'Too high error rate: {cycle_error} vs {cycle_error_ref} expected\n')

    return (True, log)

def add_test(testset, name, binary, cycle_ref, cycle_error_ref):
    test = testset.new_test(name)
    test.add_command(Shell('run', f'gvsoc --target spatz --binary {binary} run'))
    test.add_command(Checker('run', check_output, cycle_ref, cycle_error_ref))

def testset_build(testset):

    add_test(testset, 'fdotp-128', './test-spatzBenchmarks-dp-fdotp_M128', 509, 100)
    add_test(testset, 'fdotp-4096', './test-spatzBenchmarks-dp-fdotp_M4096', 1563, 25)
    add_test(testset, 'faxpy-1024', './test-spatzBenchmarks-dp-faxpy_M1024', 646, 3)
    add_test(testset, 'faxpy-256', './test-spatzBenchmarks-dp-faxpy_M256', 231, 10)
    add_test(testset, 'fconv2d-32', './test-spatzBenchmarks-dp-fconv2d_M32_N32_K7', 7303, 10)
    add_test(testset, 'fconv2d-64', './test-spatzBenchmarks-dp-fconv2d_M64_N64_K7', 27675, 5)
    add_test(testset, 'fmatmul-64', './test-spatzBenchmarks-dp-fmatmul_M64_N64_K64', 33635, 10)
